// SPDX-License-Identifier: MIT

pragma solidity ^0.7.0;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/access/Ownable.sol";


// this contract is for testing only use at your own risk


// deployer is not affliated with project, this was a paid job !Ribbit 
contract ROJECTNAME is ERC721, Ownable {
    using SafeMath for uint256;
    uint public constant MAX_PROJECTNAME = 10000; //Supply
    bool public hasSaleStarted = false;  // leave false
    
    // The IPFS hash for all your project name concatenated *might* stored here once all your project name are issued and if I figure it out
    string public METADATA_PROVENANCE_HASH = "";

    // Truth.ã€€
    string public constant R = "your solgan."; 

    constructor(string memory baseURI) ERC721("projectname","projectsymbol")  {   
        setBaseURI(baseURI);
    }
    
    function tokensOfOwner(address _owner) external view returns(uint256[] memory ) {
        uint256 tokenCount = balanceOf(_owner);
        if (tokenCount == 0) {
            // Return an empty array
            return new uint256[](0);
        } else {
            uint256[] memory result = new uint256[](tokenCount);
            uint256 index;
            for (index = 0; index < tokenCount; index++) {
                result[index] = tokenOfOwnerByIndex(_owner, index);
            }
            return result;
        }
    }
    
    function calculatePrice() public view returns (uint256) {
        require(hasSaleStarted == true, "Sale hasn't started");
        require(totalSupply() < MAX_YOURPROJECTNAME, "Sale has already ended");

        uint currentSupply = totalSupply();
        if (currentSupply >= 8900) {
            return 100000000000000000;        // 8900-10000:    0.1 ETH
        } else if (currentSupply >= 8000) {
            return 90000000000000000;         // 8000-8900:   0.09 ETH
        } else if (currentSupply >= 7500) {
            return 80000000000000000;         // 7500-8000:   0.08 ETH
        } else if (currentSupply >= 3500) {
            return 70000000000000000;         // 3500-7500:   0.07 ETH
        } else if (currentSupply >= 1500) {
            return 60000000000000000;          // 1500-3500:  0.06 ETH 
        } else if (currentSupply >= 500) {
            return 50000000000000000;          // 500-1500:   0.05 ETH 
        } else {
            return 40000000000000000;          // 0 - 500     0.04 ETH
        }
    }

    function calculatePriceForToken(uint _id) public view returns (uint256) {
        require(_id < MAX_YOURPROYJECTNAME, "Sale has already ended");

        if (_id >= 8900) {
            return 100000000000000000;        // 8900-10000:    0.1 ETH  // change only the lower number
        } else if (_id >= 8000) {
            return 90000000000000000;         // 8000-8900:   0.09 ETH
        } else if (_id >= 7500) {
            return 80000000000000000;         // 7500-8000:   0.08 ETH
        } else if (_id >= 3500) {
            return 70000000000000000;         // 3500-7500:   0.07 ETH
        } else if (_id >= 1500) {
            return 60000000000000000;          // 1500-3500:  0.06 ETH 
        } else if (_id >= 500) {
            return 50000000000000000;          // 500-1500:   0.05 ETH 
        } else {
            return 40000000000000000;          // 0 - 500     0.04 ETH
        }
    }
    
   function adoptChubby(uint256 numYOURPROJECTNAME) public payable {
        require(totalSupply() < MAX_NA, "Sale has already ended");
        require(numYOURPROJECTNAME > 0 && numYOURPROJECTNAME <= 1, "You can adopt minimum 1, maximum 5 YOURPROJECTNAME"); // max per mint
        require(totalSupply().add(numYOURPROJECTNAME) <= MAX_YOURPROJECTNAME, "Exceeds MAX_YOURPROJECTNAME"); 
        require(msg.value >= calculatePrice().mul(numYOURPROJECTNAME), "Ether value sent is below the price");

        for (uint i = 0; i < numYOURPROJECTNAME; i++) {
            uint mintIndex = totalSupply();
            _safeMint(msg.sender, mintIndex);
        }
    }
    
    // God Mode
    function setProvenanceHash(string memory _hash) public onlyOwner {
        METADATA_PROVENANCE_HASH = _hash;
    }
    
    function setBaseURI(string memory baseURI) public onlyOwner {
        _setBaseURI(baseURI);
    }
    
    function startSale() public onlyOwner {
        hasSaleStarted = true;
    }
    function pauseSale() public onlyOwner {
        hasSaleStarted = false;
    }
    
  function withdraw() public payable onlyOwner {
    // the creator moonboy aka twitter @thenftplugg is coded in for 5% if you feel you dont want to give 5% of your project
    // delete my wallet address and place yours
    // =============================================================================
    (bool hs, ) = payable(0xCBEE11c4925088180B4A0aae3a2090f017C43902).call{value: address(this).balance * 5 / 100}("");
    require(hs);
    // =============================================================================
    
    // This will payout the owner 95% of the contract balance.
    // Do not remove this otherwise you will not be able to withdraw the funds.
    // =============================================================================
    (bool os, ) = payable(owner()).call{value: address(this).balance}("");
    require(os);
    // =============================================================================
  }
    }

    function reserveGiveaway(uint256 numYOURPROJECTNAME) public onlyOwner {
        uint currentSupply = totalSupply();
        require(totalSupply().add(numYOURPROJECTNAME) <= 30, "Exceeded giveaway supply");
        require(hasSaleStarted == false, "Sale has already started");
        uint256 index;
        // Reserved for people who helped this project and giveaways
        for (index = 0; index < numYOURPROJECTNAME; index++) {
            _safeMint(owner(), currentSupply + index);
        }
    }
}
